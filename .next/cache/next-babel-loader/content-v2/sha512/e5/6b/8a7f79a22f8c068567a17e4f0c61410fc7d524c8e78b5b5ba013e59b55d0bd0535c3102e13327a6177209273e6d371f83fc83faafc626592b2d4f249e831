{"ast":null,"code":"import _classCallCheck from \"/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as Cesium from 'cesium';\nimport WindCore, { assign, defaultOptions, Field, formatData, isArray, removeDomNode } from 'wind-core';\nimport 'cesium/Build/Cesium/Widgets/widgets.css';\n\nvar CesiumWind = /*#__PURE__*/function () {\n  function CesiumWind(data) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CesiumWind);\n\n    this.canvas = null;\n    this.wind = null;\n    this.field = null;\n    this.viewer = null;\n    this.options = assign({}, options);\n    this.pickWindOptions();\n    var canvas = document.createElement('canvas');\n    canvas.style.cssText = 'position:absolute; left:0; top:0;user-select:none;pointer-events: none;';\n    canvas.className = 'cesium-wind-j';\n    this.canvas = canvas;\n\n    if (data) {\n      this.setData(data);\n    }\n  }\n\n  _createClass(CesiumWind, [{\n    key: \"addTo\",\n    value: function addTo(viewer) {\n      this.viewer = viewer;\n      this.appendCanvas();\n      this.render(this.canvas);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (!this.viewer) {\n        return;\n      }\n\n      if (this.wind) {\n        this.wind.stop();\n      }\n\n      if (this.canvas) {\n        removeDomNode(this.canvas);\n      }\n\n      delete this.canvas;\n    }\n  }, {\n    key: \"removeLayer\",\n    value: function removeLayer() {\n      this.remove();\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data) {\n      if (data && data.checkFields && data.checkFields()) {\n        this.field = data;\n      } else if (isArray(data)) {\n        this.field = formatData(data);\n      } else {\n        console.error('Illegal data');\n      }\n\n      if (this.viewer && this.canvas && this.field) {\n        this.wind.updateData(this.field);\n        this.appendCanvas();\n        this.render(this.canvas);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.field;\n    }\n  }, {\n    key: \"getWindOptions\",\n    value: function getWindOptions() {\n      return this.options.windOptions || {};\n    }\n  }, {\n    key: \"pickWindOptions\",\n    value: function pickWindOptions() {\n      var _this = this;\n\n      Object.keys(defaultOptions).forEach(function (key) {\n        if (key in _this.options) {\n          if (_this.options.windOptions === undefined) {\n            _this.options.windOptions = {};\n          }\n\n          _this.options.windOptions[key] = _this.options[key];\n        }\n      });\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      if (this.canvas === null) {\n        return;\n      }\n\n      return this.canvas.getContext('2d');\n    }\n  }, {\n    key: \"appendCanvas\",\n    value: function appendCanvas() {\n      if (!this.viewer || !this.canvas) {\n        return;\n      }\n\n      if (document.querySelector('.cesium-wind-j')) {\n        return;\n      }\n\n      this.adjustSize();\n      var cesiumWidget = this.viewer.canvas.parentNode;\n      cesiumWidget.appendChild(this.canvas);\n    }\n  }, {\n    key: \"adjustSize\",\n    value: function adjustSize() {\n      var viewer = this.viewer;\n      var canvas = this.canvas;\n      var _viewer$canvas = viewer.canvas,\n          width = _viewer$canvas.width,\n          height = _viewer$canvas.height;\n      var devicePixelRatio = 1;\n      canvas.width = width * devicePixelRatio;\n      canvas.height = height * devicePixelRatio;\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n    }\n  }, {\n    key: \"render\",\n    value: function render(canvas) {\n      if (!this.getData() || !this.viewer) {\n        return this;\n      }\n\n      var opt = this.getWindOptions();\n\n      if (canvas && !this.wind) {\n        var data = this.getData();\n        var ctx = this.getContext();\n\n        if (ctx) {\n          this.wind = new WindCore(ctx, opt, data);\n          this.wind.project = this.project.bind(this);\n          this.wind.unproject = this.unproject.bind(this);\n          this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n\n          this.wind.postrender = function () {};\n        }\n      }\n\n      if (this.wind) {\n        this.wind.prerender();\n        this.wind.render();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"project\",\n    value: function project(coordinate) {\n      var position = Cesium.Cartesian3.fromDegrees(coordinate[0], coordinate[1]);\n      var scene = this.viewer.scene;\n      var sceneCoor = Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position);\n      return [sceneCoor.x, sceneCoor.y];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(pixel) {\n      var _viewer$camera;\n\n      var viewer = this.viewer;\n      var pick = new Cesium.Cartesian2(pixel[0], pixel[1]);\n      var cartesian = viewer.scene.globe.pick((_viewer$camera = viewer.camera) === null || _viewer$camera === void 0 ? void 0 : _viewer$camera.getPickRay(pick), viewer.scene);\n\n      if (!cartesian) {\n        return null;\n      }\n\n      var ellipsoid = viewer.scene.globe.ellipsoid;\n      var cartographic = ellipsoid.cartesianToCartographic(cartesian);\n      var lat = Cesium.Math.toDegrees(cartographic.latitude);\n      var lng = Cesium.Math.toDegrees(cartographic.longitude);\n      return [lng, lat];\n    }\n  }, {\n    key: \"intersectsCoordinate\",\n    value: function intersectsCoordinate(coordinate) {\n      var ellipsoid = Cesium.Ellipsoid.WGS84;\n      var camera = this.viewer.camera;\n      var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, camera.position);\n      var point = Cesium.Cartesian3.fromDegrees(coordinate[0], coordinate[1]);\n      return occluder.isPointVisible(point);\n    }\n  }]);\n\n  return CesiumWind;\n}();\n\nvar WindLayer = CesiumWind;\nexport { Field, WindLayer };\nexport default CesiumWind;","map":{"version":3,"sources":["/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/components/Tracking/Wind.js"],"names":["Cesium","WindCore","assign","defaultOptions","Field","formatData","isArray","removeDomNode","CesiumWind","data","options","canvas","wind","field","viewer","pickWindOptions","document","createElement","style","cssText","className","setData","appendCanvas","render","stop","remove","checkFields","console","error","updateData","windOptions","Object","keys","forEach","key","undefined","getContext","querySelector","adjustSize","cesiumWidget","parentNode","appendChild","width","height","devicePixelRatio","getData","opt","getWindOptions","ctx","project","bind","unproject","intersectsCoordinate","postrender","prerender","coordinate","position","Cartesian3","fromDegrees","scene","sceneCoor","SceneTransforms","wgs84ToWindowCoordinates","x","y","pixel","pick","Cartesian2","cartesian","globe","camera","getPickRay","ellipsoid","cartographic","cartesianToCartographic","lat","Math","toDegrees","latitude","lng","longitude","Ellipsoid","WGS84","occluder","EllipsoidalOccluder","point","isPointVisible","WindLayer"],"mappings":"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","sourcesContent":["import * as Cesium from 'cesium';\nimport WindCore, { assign, defaultOptions, Field, formatData, isArray, removeDomNode, } from 'wind-core';\nimport 'cesium/Build/Cesium/Widgets/widgets.css';\n\nclass CesiumWind {\n  constructor(data, options = {}) {\n    this.canvas = null;\n    this.wind = null;\n    this.field = null;\n    this.viewer = null;\n    this.options = assign({}, options);\n    this.pickWindOptions();\n\n    const canvas = document.createElement('canvas');\n    canvas.style.cssText =\n      'position:absolute; left:0; top:0;user-select:none;pointer-events: none;';\n    canvas.className = 'cesium-wind-j';\n    this.canvas = canvas;\n\n    if (data) {\n      this.setData(data);\n    }\n  }\n\n  addTo(viewer) {\n    this.viewer = viewer;\n    this.appendCanvas();\n    this.render(this.canvas);\n  }\n\n  remove() {\n    if (!this.viewer) {\n      return;\n    }\n    if (this.wind) {\n      this.wind.stop();\n    }\n    if (this.canvas) {\n      removeDomNode(this.canvas);\n    }\n    delete this.canvas;\n  }\n\n  removeLayer() {\n    this.remove();\n  }\n\n  setData(data) {\n    if (data && data.checkFields && data.checkFields()) {\n      this.field = data;\n    } else if (isArray(data)) {\n      this.field = formatData(data);\n    } else {\n      console.error('Illegal data');\n    }\n\n    if (this.viewer && this.canvas && this.field) {\n      this.wind.updateData(this.field);\n      this.appendCanvas();\n      this.render(this.canvas);\n    }\n\n    return this;\n  }\n\n  getData() {\n    return this.field;\n  }\n\n  getWindOptions() {\n    return this.options.windOptions || {};\n  }\n\n  pickWindOptions() {\n    Object.keys(defaultOptions).forEach((key) => {\n      if (key in this.options) {\n        if (this.options.windOptions === undefined) {\n          this.options.windOptions = {};\n        }\n        this.options.windOptions[key] = this.options[key];\n      }\n    });\n  }\n\n  getContext() {\n    if (this.canvas === null) {\n      return;\n    }\n    return this.canvas.getContext('2d');\n  }\n\n  appendCanvas() {\n    if (!this.viewer || !this.canvas) {\n      return;\n    }\n    if (document.querySelector('.cesium-wind-j')) {\n      return;\n    }\n    this.adjustSize();\n    const cesiumWidget = this.viewer.canvas.parentNode;\n    cesiumWidget.appendChild(this.canvas);\n  }\n\n  adjustSize() {\n    const viewer = this.viewer;\n    const canvas = this.canvas;\n    const { width, height } = viewer.canvas;\n    const devicePixelRatio = 1;\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n  }\n\n  render(canvas) {\n    if (!this.getData() || !this.viewer) {\n      return this;\n    }\n    const opt = this.getWindOptions();\n    if (canvas && !this.wind) {\n      const data = this.getData();\n\n      const ctx = this.getContext();\n\n      if (ctx) {\n        this.wind = new WindCore(ctx, opt, data);\n\n        this.wind.project = this.project.bind(this);\n        this.wind.unproject = this.unproject.bind(this);\n        this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n        this.wind.postrender = () => {\n        };\n      }\n    }\n\n    if (this.wind) {\n      this.wind.prerender();\n      this.wind.render();\n    }\n\n    return this;\n  }\n\n  project(coordinate) {\n    const position = Cesium.Cartesian3.fromDegrees(\n      coordinate[0],\n      coordinate[1],\n    );\n    const scene = this.viewer.scene;\n    const sceneCoor = Cesium.SceneTransforms.wgs84ToWindowCoordinates(\n      scene,\n      position,\n    );\n    return [sceneCoor.x, sceneCoor.y];\n  }\n\n  unproject(pixel) {\n    const viewer = this.viewer;\n    const pick = new Cesium.Cartesian2(pixel[0], pixel[1]);\n    const cartesian = viewer.scene.globe.pick(\n      viewer.camera?.getPickRay(pick),\n      viewer.scene,\n    );\n\n    if (!cartesian) {\n      return null;\n    }\n\n    const ellipsoid = viewer.scene.globe.ellipsoid;\n    const cartographic = ellipsoid.cartesianToCartographic(cartesian);\n    const lat = Cesium.Math.toDegrees(cartographic.latitude);\n    const lng = Cesium.Math.toDegrees(cartographic.longitude);\n    return [lng, lat];\n  }\n\n  intersectsCoordinate(coordinate) {\n    const ellipsoid = Cesium.Ellipsoid.WGS84;\n    const camera = this.viewer.camera;\n    const occluder = new Cesium.EllipsoidalOccluder(ellipsoid, camera.position);\n    const point = Cesium.Cartesian3.fromDegrees(coordinate[0], coordinate[1]);\n    return occluder.isPointVisible(point);\n  }\n}\n\nconst WindLayer = CesiumWind;\n\nexport { Field, WindLayer };\n\nexport default CesiumWind;"]},"metadata":{},"sourceType":"module"}