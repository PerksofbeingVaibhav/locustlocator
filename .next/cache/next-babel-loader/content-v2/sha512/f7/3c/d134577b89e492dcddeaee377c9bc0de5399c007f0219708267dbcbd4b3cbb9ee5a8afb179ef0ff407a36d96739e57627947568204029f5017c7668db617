{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/components/Tracking/Tracking.js\";\nimport { useEffect, useState, useRef } from 'react';\nimport axios from \"axios\";\nimport Footer from \"../../components/UI/Footer/Footer\";\nimport * as Cesium from 'cesium';\nimport CesiumWind from \"./Wind\";\nimport classes from \"./Tracking.module.scss\"; // fetching locust locations\n\nconst fetchData = async () => {\n  let data = [];\n  await axios.get(\"https://services5.arcgis.com/sjP4Ugu5s0dZWLjd/arcgis/rest/services/Swarms_Public/FeatureServer/0/query?where=STARTDATE%20%3E%3D%20TIMESTAMP%20%272021-01-01%2000%3A00%3A00%27%20AND%20STARTDATE%20%3C%3D%20TIMESTAMP%20%272021-04-04%2000%3A00%3A00%27&outFields=STARTDATE,LOCNAME,COUNTRYID,LOCPRESENT&outSR=4326&f=json\").then(response => {\n    response.data.features.map(pos => {\n      console.log(pos);\n      data.push({\n        longitude: pos.geometry.x,\n        latitude: pos.geometry.y\n      });\n    });\n  });\n  return data;\n};\n\nconst usePrevious = value => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  console.log(value);\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n};\n\nconst Tracking = () => {\n  const {\n    0: longitude,\n    1: setLongitude\n  } = useState(0);\n  const {\n    0: latitude,\n    1: setLatitude\n  } = useState(0);\n  const {\n    0: predictedData,\n    1: setPredictedData\n  } = useState(null);\n  const {\n    0: displayButtonMessage,\n    1: setDisplayButtonMessage\n  } = useState(\"Predict\");\n  const {\n    0: displayMessage,\n    1: setDisplayMessage\n  } = useState(\"\");\n\n  const init = locationData => {\n    // default view over India\n    var west = 68.0;\n    var south = 7.0;\n    var east = 89.0;\n    var north = 35.0;\n    var indiaPosition = Cesium.Rectangle.fromDegrees(west, south, east, north);\n    Cesium.Camera.DEFAULT_VIEW_FACTOR = 2;\n    Cesium.Camera.DEFAULT_VIEW_RECTANGLE = indiaPosition;\n    var imagery = Cesium.createDefaultImageryProviderViewModels(); // initialize viewer\n\n    const viewer = new Cesium.Viewer(\"cesium\", {\n      scene3DOnly: false,\n      selectionIndicator: true,\n      imageryProviderViewModels: imagery,\n      selectedImageryProviderViewModel: imagery[1],\n      animation: false,\n      timeline: false // automaticallyTrackDataSourceClocks: false\n\n    }); // removing the stars\n    // var scene = viewer.scene;\n    // scene.skyBox.destroy();\n    // scene.skyBox = undefined;\n    // viewer.imageryLayers.addImageryProvider(provider);\n    // enabling lighting effects due to sun\n    // adding sentinel 2a, meteo 10 and spot 6 satellite realtime visualization\n\n    viewer.dataSources.removeAll();\n    var dataSrc = Cesium.CzmlDataSource.load(\"sat.czml\");\n    viewer.dataSources.add(dataSrc); // var editHandler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n    // editHandler.setInputAction(function (e) {\n    //   var shapeEditMenu = document.getElementById(\"toolbar\");\n    //   shapeEditMenu.textContent = 'Testing';\n    //   shapeEditMenu.style.display = \"block\";\n    //   shapeEditMenu.style.left = e.position.x + 'px';\n    //   shapeEditMenu.style.top = e.position.y + 'px';\n    //   shapeEditMenu.style.background = 'rgba(42, 42, 42, 0.8)';\n    //   shapeEditMenu.style.border = '1px solid #888';\n    // }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n    // editHandler.setInputAction(function (e) {\n    //   var shapeEditMenu = document.getElementById(\"toolbar\");\n    //   shapeEditMenu.style.display = \"none\";\n    // }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n    // adding predicted point\n    // if (prediction) {\n    //   viewer.entities.add({\n    //     position: Cesium.Cartesian3.fromDegrees(parseInt(longitude), parseInt(latitude)),\n    //     point: {\n    //       pixelSize: 30,\n    //       color: Cesium.Color.CRIMSON.withAlpha(0.4),\n    //     },\n    //   });\n    // }\n    // populating locust locations on globe\n\n    var billboards = viewer.scene.primitives.add(new Cesium.BillboardCollection());\n    {\n      locationData.map(coords => {\n        billboards.add({\n          position: Cesium.Cartesian3.fromDegrees(coords.longitude, coords.latitude),\n          image: '/Assets/Images/locust.png'\n        });\n      });\n    } // adding position marker\n\n    var entity = viewer.entities.add({\n      name: \"location\",\n      label: {\n        show: false,\n        showBackground: true,\n        font: \"14px monospace\",\n        style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n        pixelOffset: new Cesium.Cartesian2(0, -9)\n      }\n    }); // showing position popup on mouse move\n\n    viewer.canvas.addEventListener('mousemove', function (e) {\n      var mousePosition = new Cesium.Cartesian2(e.clientX, e.clientY);\n      var ellipsoid = viewer.scene.globe.ellipsoid;\n      var cartesian = viewer.camera.pickEllipsoid(mousePosition, ellipsoid);\n\n      if (cartesian) {\n        var cartographic = ellipsoid.cartesianToCartographic(cartesian);\n        var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(2);\n        var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(2);\n        entity.position = cartesian;\n        entity.label.show = true;\n        entity.label.text = \"Lon: \" + (\"   \" + longitudeString).slice(-7) + \"\\u00B0\" + \"\\nLat: \" + (\"   \" + latitudeString).slice(-7) + \"\\u00B0\";\n      } else {\n        entity.label.show = false;\n      }\n    }, false); // Visualizing wind on the globe\n\n    const windOptions = {\n      colorScale: ['rgb(36,104, 180)', 'rgb(60,157, 194)', 'rgb(128,205,193 )', 'rgb(151,218,168 )', 'rgb(198,231,181)', 'rgb(238,247,217)', 'rgb(255,238,159)', 'rgb(252,217,125)', 'rgb(255,182,100)', 'rgb(252,150,75)', 'rgb(250,112,52)', 'rgb(245,64,32)', 'rgb(237,45,28)', 'rgb(220,24,32)', 'rgb(180,0,35)'],\n      frameRate: 16,\n      maxAge: 60,\n      globalAlpha: 0.9,\n      velocityScale: 1 / 30,\n      paths: 2000\n    };\n    fetch('https://qjvic.github.io/cesium-wind/examples/wind.json').then(res => res.json()).then(res => {\n      const windLayer = new CesiumWind(res, {\n        windOptions\n      });\n      windLayer.addTo(viewer);\n    });\n  };\n\n  useEffect(async () => {\n    const locationData = await fetchData(); // const prediction = await predictedData\n\n    init(locationData);\n  }, []);\n  const prevLat = usePrevious(latitude);\n  const prevLong = usePrevious(longitude); // const prevPredictedData = usePrevious(predictedData);\n\n  const onFormSubmitHandler = event => {\n    event.preventDefault();\n    setDisplayButtonMessage(\"Predicting...\");\n    console.log(\"Longitude: \" + longitude);\n    console.log(\"Latitude: \" + latitude);\n    let lat = latitude;\n    let long = longitude;\n\n    if (lat < 0 || long < 0) {\n      setDisplayButtonMessage(\"Predict\");\n      setDisplayMessage(\"Invalid input\");\n      setPredictedData(0);\n    } else if (prevLat === lat && prevLong === long) {\n      setDisplayButtonMessage(\"Predict\");\n      console.log(\"lat and long matched with prev values\");\n    } else {\n      let data = `lat-${lat}-long-${long}`; // setLoading(true)\n\n      axios.post(`https://landcoverapi.azurewebsites.net/predict/${data}`).then(response => {\n        setDisplayButtonMessage(\"Done ✔️\");\n        setDisplayMessage(\"Probability = \" + response.data.risk.toFixed(2) + \"%\"); // plotPredictedPoint(longitude, latitude)\n\n        setPredictedData(response.data.risk / 100);\n        console.log(response.data.risk / 100);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  const onResetHandler = event => {\n    event.preventDefault();\n    setDisplayMessage(\"\");\n    setDisplayButtonMessage(\"Predict\");\n    setLongitude(0);\n    setLatitude(0);\n    setPredictedData(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"cesium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.MetricsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Content,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Predict Probability of Locust Attack\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.Form,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.FormEntity,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"longitude\",\n              children: \"longitude: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"long\",\n              value: longitude,\n              onChange: e => setLongitude(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.FormEntity,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"latitude\",\n              children: \"latitude: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"lat\",\n              value: latitude,\n              onChange: e => setLatitude(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.ButtonsContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onFormSubmitHandler,\n              children: displayButtonMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onResetHandler,\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.DisplayMessage,\n            children: displayMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.GuageContainer,\n        children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n          id: \"gauge-chart2\",\n          nrOfLevels: 420,\n          arcsLength: [0.2, 0.5, 0.2],\n          colors: ['#5BE12C', '#F5CD19', '#EA4228'],\n          percent: predictedData,\n          arcPadding: 0.02\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Tracking;","map":{"version":3,"sources":["/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/components/Tracking/Tracking.js"],"names":["useEffect","useState","useRef","axios","Footer","Cesium","CesiumWind","classes","fetchData","data","get","then","response","features","map","pos","console","log","push","longitude","geometry","x","latitude","y","usePrevious","value","ref","current","Tracking","setLongitude","setLatitude","predictedData","setPredictedData","displayButtonMessage","setDisplayButtonMessage","displayMessage","setDisplayMessage","init","locationData","west","south","east","north","indiaPosition","Rectangle","fromDegrees","Camera","DEFAULT_VIEW_FACTOR","DEFAULT_VIEW_RECTANGLE","imagery","createDefaultImageryProviderViewModels","viewer","Viewer","scene3DOnly","selectionIndicator","imageryProviderViewModels","selectedImageryProviderViewModel","animation","timeline","dataSources","removeAll","dataSrc","CzmlDataSource","load","add","billboards","scene","primitives","BillboardCollection","coords","position","Cartesian3","image","entity","entities","name","label","show","showBackground","font","style","LabelStyle","FILL_AND_OUTLINE","horizontalOrigin","HorizontalOrigin","LEFT","verticalOrigin","VerticalOrigin","BOTTOM","pixelOffset","Cartesian2","canvas","addEventListener","e","mousePosition","clientX","clientY","ellipsoid","globe","cartesian","camera","pickEllipsoid","cartographic","cartesianToCartographic","longitudeString","Math","toDegrees","toFixed","latitudeString","text","slice","windOptions","colorScale","frameRate","maxAge","globalAlpha","velocityScale","paths","fetch","res","json","windLayer","addTo","prevLat","prevLong","onFormSubmitHandler","event","preventDefault","lat","long","post","risk","catch","error","onResetHandler","MetricsContainer","Content","Form","FormEntity","target","ButtonsContainer","DisplayMessage","GuageContainer"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport axios from \"axios\"\nimport Footer from \"../../components/UI/Footer/Footer\"\nimport * as Cesium from 'cesium';\nimport CesiumWind from \"./Wind\";\nimport classes from \"./Tracking.module.scss\"\n\n// fetching locust locations\nconst fetchData = async () => {\n  let data = []\n  await axios.get(\"https://services5.arcgis.com/sjP4Ugu5s0dZWLjd/arcgis/rest/services/Swarms_Public/FeatureServer/0/query?where=STARTDATE%20%3E%3D%20TIMESTAMP%20%272021-01-01%2000%3A00%3A00%27%20AND%20STARTDATE%20%3C%3D%20TIMESTAMP%20%272021-04-04%2000%3A00%3A00%27&outFields=STARTDATE,LOCNAME,COUNTRYID,LOCPRESENT&outSR=4326&f=json\")\n    .then(response => {\n      response.data.features.map(pos => {\n        console.log(pos)\n        data.push({\n          longitude: pos.geometry.x,\n          latitude: pos.geometry.y\n        })\n      })\n    })\n  return data\n}\n\nconst usePrevious = (value) => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  console.log(value)\n  const ref = useRef();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\n\nconst Tracking = () => {\n  const [longitude, setLongitude] = useState(0)\n  const [latitude, setLatitude] = useState(0)\n  const [predictedData, setPredictedData] = useState(null)\n  const [displayButtonMessage, setDisplayButtonMessage] = useState(\"Predict\")\n  const [displayMessage, setDisplayMessage] = useState(\"\")\n\n  const init = (locationData) => {\n    // default view over India\n    var west = 68.0;\n    var south = 7.0;\n    var east = 89.0;\n    var north = 35.0;\n\n    var indiaPosition = Cesium.Rectangle.fromDegrees(west, south, east, north);\n\n    Cesium.Camera.DEFAULT_VIEW_FACTOR = 2;\n    Cesium.Camera.DEFAULT_VIEW_RECTANGLE = indiaPosition;\n\n    var imagery = Cesium.createDefaultImageryProviderViewModels();\n\n    // initialize viewer\n    const viewer = new Cesium.Viewer(\"cesium\", {\n      scene3DOnly: false,\n      selectionIndicator: true,\n      imageryProviderViewModels: imagery,\n      selectedImageryProviderViewModel: imagery[1],\n      animation: false,\n      timeline: false,\n      // automaticallyTrackDataSourceClocks: false\n    });\n    // removing the stars\n    // var scene = viewer.scene;\n    // scene.skyBox.destroy();\n    // scene.skyBox = undefined;\n\n    // viewer.imageryLayers.addImageryProvider(provider);\n    // enabling lighting effects due to sun\n\n    // adding sentinel 2a, meteo 10 and spot 6 satellite realtime visualization\n    viewer.dataSources.removeAll();\n    var dataSrc = Cesium.CzmlDataSource.load(\"sat.czml\");\n    viewer.dataSources.add(dataSrc);\n\n\n    // var editHandler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n    // editHandler.setInputAction(function (e) {\n    //   var shapeEditMenu = document.getElementById(\"toolbar\");\n    //   shapeEditMenu.textContent = 'Testing';\n    //   shapeEditMenu.style.display = \"block\";\n    //   shapeEditMenu.style.left = e.position.x + 'px';\n    //   shapeEditMenu.style.top = e.position.y + 'px';\n    //   shapeEditMenu.style.background = 'rgba(42, 42, 42, 0.8)';\n    //   shapeEditMenu.style.border = '1px solid #888';\n    // }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n\n    // editHandler.setInputAction(function (e) {\n    //   var shapeEditMenu = document.getElementById(\"toolbar\");\n    //   shapeEditMenu.style.display = \"none\";\n    // }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n\n\n    // adding predicted point\n    // if (prediction) {\n    //   viewer.entities.add({\n    //     position: Cesium.Cartesian3.fromDegrees(parseInt(longitude), parseInt(latitude)),\n    //     point: {\n    //       pixelSize: 30,\n    //       color: Cesium.Color.CRIMSON.withAlpha(0.4),\n    //     },\n    //   });\n    // }\n\n    // populating locust locations on globe\n    var billboards = viewer.scene.primitives.add(new Cesium.BillboardCollection());\n    {\n      locationData.map(coords => {\n        billboards.add({\n          position: Cesium.Cartesian3.fromDegrees(coords.longitude, coords.latitude),\n          image: '/Assets/Images/locust.png'\n        });\n      })\n    }\n\n    // adding position marker\n    var entity = viewer.entities.add({\n      name: \"location\",\n      label: {\n        show: false,\n        showBackground: true,\n        font: \"14px monospace\",\n        style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n        pixelOffset: new Cesium.Cartesian2(0, -9),\n      },\n    });\n\n    // showing position popup on mouse move\n    viewer.canvas.addEventListener('mousemove', function (e) {\n\n      var mousePosition = new Cesium.Cartesian2(e.clientX, e.clientY);\n      var ellipsoid = viewer.scene.globe.ellipsoid;\n      var cartesian = viewer.camera.pickEllipsoid(mousePosition, ellipsoid);\n\n      if (cartesian) {\n        var cartographic = ellipsoid.cartesianToCartographic(cartesian);\n        var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(2);\n        var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(2);\n\n        entity.position = cartesian;\n        entity.label.show = true;\n        entity.label.text = \"Lon: \" +\n          (\"   \" + longitudeString).slice(-7) +\n          \"\\u00B0\" +\n          \"\\nLat: \" +\n          (\"   \" + latitudeString).slice(-7) +\n          \"\\u00B0\";\n\n      } else {\n        entity.label.show = false;\n      }\n\n    }, false);\n\n    // Visualizing wind on the globe\n    const windOptions = {\n      colorScale: [\n        'rgb(36,104, 180)',\n        'rgb(60,157, 194)',\n        'rgb(128,205,193 )',\n        'rgb(151,218,168 )',\n        'rgb(198,231,181)',\n        'rgb(238,247,217)',\n        'rgb(255,238,159)',\n        'rgb(252,217,125)',\n        'rgb(255,182,100)',\n        'rgb(252,150,75)',\n        'rgb(250,112,52)',\n        'rgb(245,64,32)',\n        'rgb(237,45,28)',\n        'rgb(220,24,32)',\n        'rgb(180,0,35)',\n      ],\n      frameRate: 16,\n      maxAge: 60,\n      globalAlpha: 0.9,\n      velocityScale: 1 / 30,\n      paths: 2000\n    };\n\n    fetch('https://qjvic.github.io/cesium-wind/examples/wind.json')\n      .then(res => res.json())\n      .then(res => {\n        const windLayer = new CesiumWind(res, { windOptions });\n        windLayer.addTo(viewer);\n      });\n  }\n\n  useEffect(async () => {\n    const locationData = await fetchData()\n    // const prediction = await predictedData\n    init(locationData);\n  }, [])\n\n  const prevLat = usePrevious(latitude);\n  const prevLong = usePrevious(longitude);\n  // const prevPredictedData = usePrevious(predictedData);\n\n  const onFormSubmitHandler = (event) => {\n    event.preventDefault();\n    setDisplayButtonMessage(\"Predicting...\")\n    console.log(\"Longitude: \" + longitude)\n    console.log(\"Latitude: \" + latitude)\n    let lat = latitude\n    let long = longitude\n\n    if (lat < 0 || long < 0) {\n      setDisplayButtonMessage(\"Predict\")\n      setDisplayMessage(\"Invalid input\")\n      setPredictedData(0)\n    }\n    else if (prevLat === lat && prevLong === long) {\n      setDisplayButtonMessage(\"Predict\")\n      console.log(\"lat and long matched with prev values\")\n    }\n    else {\n      let data = `lat-${lat}-long-${long}`\n      // setLoading(true)\n      axios.post(`https://landcoverapi.azurewebsites.net/predict/${data}`)\n        .then(response => {\n          setDisplayButtonMessage(\"Done ✔️\")\n          setDisplayMessage(\"Probability = \" + response.data.risk.toFixed(2) + \"%\")\n          // plotPredictedPoint(longitude, latitude)\n          setPredictedData(response.data.risk / 100)\n          console.log(response.data.risk / 100)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    }\n  }\n\n\n  const onResetHandler = (event) => {\n    event.preventDefault();\n    setDisplayMessage(\"\")\n    setDisplayButtonMessage(\"Predict\")\n    setLongitude(0)\n    setLatitude(0)\n    setPredictedData(null)\n  }\n\n  return (\n    <>\n      <div id=\"cesium\" />\n      <div id=\"toolbar\" />\n      <div className={classes.MetricsContainer}>\n        <div className={classes.Content}>\n          <h1>Predict Probability of Locust Attack</h1>\n          <div className={classes.Form}>\n            <div className={classes.FormEntity}>\n              <label htmlFor=\"longitude\">longitude: </label>\n              <input type=\"text\" name=\"long\" value={longitude} onChange={(e) => setLongitude(e.target.value)} />\n            </div>\n            <div className={classes.FormEntity}>\n              <label htmlFor=\"latitude\">latitude: </label>\n              <input type=\"text\" name=\"lat\" value={latitude} onChange={(e) => setLatitude(e.target.value)} />\n            </div>\n            <div className={classes.ButtonsContainer}>\n              <button onClick={onFormSubmitHandler}>{displayButtonMessage}</button>\n              <button onClick={onResetHandler}>Reset</button>\n            </div>\n            <div className={classes.DisplayMessage}>{displayMessage}</div>\n          </div>\n        </div>\n        <div className={classes.GuageContainer}>\n          <GaugeChart id=\"gauge-chart2\"\n            nrOfLevels={420}\n            arcsLength={[0.2, 0.5, 0.2]}\n            colors={['#5BE12C', '#F5CD19', '#EA4228']}\n            percent={predictedData}\n            arcPadding={0.02}\n          />\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default Tracking;"]},"metadata":{},"sourceType":"module"}