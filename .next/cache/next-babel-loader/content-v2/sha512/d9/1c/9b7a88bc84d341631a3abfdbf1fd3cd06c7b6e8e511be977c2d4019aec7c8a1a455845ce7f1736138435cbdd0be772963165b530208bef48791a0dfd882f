{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/pages/tracking/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport dynamic from 'next/dynamic';\nimport { NextSeo } from \"next-seo\";\nimport axios from \"axios\";\nimport PageLoader from \"../../components/LottieAnimations/pageLoader/PageLoader\"; // import GaugeChart from 'react-gauge-chart'\n\nvar Tracking = dynamic(_c = function _c() {\n  return import('../../components/Tracking/Tracking');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../../components/Tracking/Tracking')];\n    },\n    modules: ['../../components/Tracking/Tracking']\n  }\n});\n_c2 = Tracking;\n\nvar Tracker = function Tracker() {\n  _s();\n\n  var _useState = useState(false),\n      pageLoading = _useState[0],\n      setPageLoading = _useState[1]; // const [longitude, setLongitude] = useState(0)\n  // const [latitude, setLatitude] = useState(0)\n  // const [predictedData, setPredictedData] = useState(null)\n  // const [displayButtonMessage, setDisplayButtonMessage] = useState(\"Predict\")\n  // const [displayMessage, setDisplayMessage] = useState(\"\")\n  // const usePrevious = (value) => {\n  //     const ref = useRef();\n  //     useEffect(() => {\n  //         ref.current = value;\n  //     }, [value])\n  //     return ref.current;\n  // }\n\n\n  useEffect(function () {\n    setPageLoading(true);\n    setTimeout(function () {\n      setPageLoading(false);\n    }, 5000);\n  }, []);\n  var SEO = {\n    title: \"Locust Locator\",\n    description: \"track locusts here\",\n    openGraph: {\n      title: \"Locust Locator\",\n      description: \"track locusts here\"\n    }\n  }; // const prevLat = usePrevious(latitude);\n  // const prevLong = usePrevious(longitude);\n  // const onFormSubmitHandler = (event) => {\n  //     event.preventDefault();\n  //     setDisplayButtonMessage(\"Predicting...\")\n  //     console.log(\"Longitude: \" + longitude)\n  //     console.log(\"Latitude: \" + latitude)\n  //     let lat = latitude\n  //     let long = longitude\n  //     if (lat < 0 || long < 0) {\n  //         setDisplayButtonMessage(\"Predict\")\n  //         setDisplayMessage(\"Invalid input\")\n  //         setPredictedData(0)\n  //     }\n  //     else if (prevLat === lat && prevLong === long) {\n  //         setDisplayButtonMessage(\"Predict\")\n  //         console.log(\"lat and long matched with prev values\")\n  //     }\n  //     else {\n  //         let data = `lat-${lat}-long-${long}`\n  //         // setLoading(true)\n  //         axios.post(`https://landcoverapi.azurewebsites.net/predict/${data}`)\n  //             .then(response => {\n  //                 setDisplayButtonMessage(\"Done ✔️\")\n  //                 setDisplayMessage(\"Probability = \" + response.data.risk.toFixed(2) + \"%\")\n  //                 // plotPredictedPoint(longitude, latitude)\n  //                 setPredictedData(response.data.risk / 100)\n  //                 console.log(response.data.risk / 100)\n  //             })\n  //             .catch(error => {\n  //                 console.log(error)\n  //             })\n  //     }\n  // }\n  // const onResetHandler = (event) => {\n  //     event.preventDefault();\n  //     setDisplayMessage(\"\")\n  //     setDisplayButtonMessage(\"Predict\")\n  //     setLongitude(0)\n  //     setLatitude(0)\n  //     // setLoading(false)\n  //     setPredictedData(null)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NextSeo, _objectSpread({}, SEO), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, _this), pageLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-content\",\n        children: [/*#__PURE__*/_jsxDEV(PageLoader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, _this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            fontSize: \"calc(8px + 0.8vw)\",\n            color: \"rgb(228, 227, 227)\",\n            textAlign: \"center\"\n          },\n          children: \"Disclaimer: To get the best gpu performance use the desktop app.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }, _this) : null, /*#__PURE__*/_jsxDEV(Tracking, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Tracker, \"tStG9WWqhQlruEUiXmP/nmNRJtA=\");\n\n_c3 = Tracker;\nexport default Tracker;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Tracking$dynamic\");\n$RefreshReg$(_c2, \"Tracking\");\n$RefreshReg$(_c3, \"Tracker\");","map":{"version":3,"sources":["/Users/jappanjeetsingh/Desktop/web/projects/LLAM/LLAM-V2/LLAM/pages/tracking/index.js"],"names":["useEffect","useState","dynamic","NextSeo","axios","PageLoader","Tracking","ssr","Tracker","pageLoading","setPageLoading","setTimeout","SEO","title","description","openGraph","fontSize","color","textAlign"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yDAAvB,C,CACA;;AAEA,IAAMC,QAAQ,GAAGJ,OAAO,MAAC;AAAA,SAAM,OAAO,oCAAP,CAAN;AAAA,CAAD,EAAqD;AACzEK,EAAAA,GAAG,EAAE,KADoE;AAAA;AAAA;AAAA,kCAAvC,oCAAuC;AAAA;AAAA,cAAvC,oCAAuC;AAAA;AAAA,CAArD,CAAxB;MAAMD,Q;;AAKN,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,kBACoBP,QAAQ,CAAC,KAAD,CAD5B;AAAA,MACXQ,WADW;AAAA,MACEC,cADF,iBAElB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAC,IAAAA,UAAU,CAAC,YAAM;AACbD,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GALQ,EAKN,EALM,CAAT;AAOA,MAAME,GAAG,GAAG;AACRC,IAAAA,KAAK,EAAE,gBADC;AAERC,IAAAA,WAAW,EAAE,oBAFL;AAIRC,IAAAA,SAAS,EAAE;AACPF,MAAAA,KAAK,EAAE,gBADA;AAEPC,MAAAA,WAAW,EAAE;AAFN;AAJH,GAAZ,CAvBkB,CAiClB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA,4BACI,QAAC,OAAD,oBAAaF,GAAb;AAAA;AAAA;AAAA;AAAA,aADJ,EAEKH,WAAW,gBAEJ;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAI,UAAA,KAAK,EAAE;AAAEO,YAAAA,QAAQ,EAAE,mBAAZ;AAAiCC,YAAAA,KAAK,EAAE,oBAAxC;AAA8DC,YAAAA,SAAS,EAAE;AAAzE,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,aAFI,GASN,IAXV,eAYI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,aAZJ;AAAA,kBADJ;AA6CH,CA7HD;;GAAMV,O;;MAAAA,O;AA+HN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from \"react\"\nimport dynamic from 'next/dynamic'\nimport { NextSeo } from \"next-seo\"\nimport axios from \"axios\"\nimport PageLoader from \"../../components/LottieAnimations/pageLoader/PageLoader\"\n// import GaugeChart from 'react-gauge-chart'\n\nconst Tracking = dynamic(() => import('../../components/Tracking/Tracking'), {\n    ssr: false,\n});\n\n\nconst Tracker = () => {\n    const [pageLoading, setPageLoading] = useState(false)\n    // const [longitude, setLongitude] = useState(0)\n    // const [latitude, setLatitude] = useState(0)\n    // const [predictedData, setPredictedData] = useState(null)\n    // const [displayButtonMessage, setDisplayButtonMessage] = useState(\"Predict\")\n    // const [displayMessage, setDisplayMessage] = useState(\"\")\n\n    // const usePrevious = (value) => {\n    //     const ref = useRef();\n    //     useEffect(() => {\n    //         ref.current = value;\n    //     }, [value])\n    //     return ref.current;\n    // }\n\n    useEffect(() => {\n        setPageLoading(true)\n        setTimeout(() => {\n            setPageLoading(false)\n        }, 5000);\n    }, [])\n\n    const SEO = {\n        title: \"Locust Locator\",\n        description: \"track locusts here\",\n\n        openGraph: {\n            title: \"Locust Locator\",\n            description: \"track locusts here\",\n        },\n    }\n\n    // const prevLat = usePrevious(latitude);\n    // const prevLong = usePrevious(longitude);\n\n    // const onFormSubmitHandler = (event) => {\n    //     event.preventDefault();\n    //     setDisplayButtonMessage(\"Predicting...\")\n    //     console.log(\"Longitude: \" + longitude)\n    //     console.log(\"Latitude: \" + latitude)\n    //     let lat = latitude\n    //     let long = longitude\n\n    //     if (lat < 0 || long < 0) {\n    //         setDisplayButtonMessage(\"Predict\")\n    //         setDisplayMessage(\"Invalid input\")\n    //         setPredictedData(0)\n    //     }\n    //     else if (prevLat === lat && prevLong === long) {\n    //         setDisplayButtonMessage(\"Predict\")\n    //         console.log(\"lat and long matched with prev values\")\n    //     }\n    //     else {\n    //         let data = `lat-${lat}-long-${long}`\n    //         // setLoading(true)\n    //         axios.post(`https://landcoverapi.azurewebsites.net/predict/${data}`)\n    //             .then(response => {\n    //                 setDisplayButtonMessage(\"Done ✔️\")\n    //                 setDisplayMessage(\"Probability = \" + response.data.risk.toFixed(2) + \"%\")\n    //                 // plotPredictedPoint(longitude, latitude)\n    //                 setPredictedData(response.data.risk / 100)\n    //                 console.log(response.data.risk / 100)\n    //             })\n    //             .catch(error => {\n    //                 console.log(error)\n    //             })\n    //     }\n    // }\n\n    // const onResetHandler = (event) => {\n    //     event.preventDefault();\n    //     setDisplayMessage(\"\")\n    //     setDisplayButtonMessage(\"Predict\")\n    //     setLongitude(0)\n    //     setLatitude(0)\n    //     // setLoading(false)\n    //     setPredictedData(null)\n    // }\n\n    return (\n        <>\n            <NextSeo {...SEO} />\n            {pageLoading ?\n                (\n                    <div id=\"loading-overlay\">\n                        <div className=\"loader-content\">\n                            <PageLoader />\n                            <h1 style={{ fontSize: \"calc(8px + 0.8vw)\", color: \"rgb(228, 227, 227)\", textAlign: \"center\" }}>Disclaimer: To get the best gpu performance use the desktop app.</h1>\n                        </div>\n                    </div>\n                )\n                : null}\n            <Tracking />\n            {/* <div className={classes.MetricsContainer}>\n                <div className={classes.Content}>\n                    <h1>Predict Probability of Locust Attack</h1>\n                    <div className={classes.Form}>\n                        <div className={classes.FormEntity}>\n                            <label htmlFor=\"longitude\">longitude: </label>\n                            <input type=\"text\" name=\"long\" value={longitude} onChange={(e) => setLongitude(e.target.value)} />\n                        </div>\n                        <div className={classes.FormEntity}>\n                            <label htmlFor=\"latitude\">latitude: </label>\n                            <input type=\"text\" name=\"lat\" value={latitude} onChange={(e) => setLatitude(e.target.value)} />\n                        </div>\n                        <div className={classes.ButtonsContainer}>\n                            <button onClick={onFormSubmitHandler}>{displayButtonMessage}</button>\n                            <button onClick={onResetHandler}>Reset</button>\n                        </div>\n                        <div className={classes.DisplayMessage}>{displayMessage}</div>\n                    </div>\n                </div>\n                <div className={classes.GuageContainer}>\n                    <GaugeChart id=\"gauge-chart2\"\n                        nrOfLevels={420}\n                        arcsLength={[0.2, 0.5, 0.2]}\n                        colors={['#5BE12C', '#F5CD19', '#EA4228']}\n                        percent={predictedData}\n                        arcPadding={0.02}\n                    />\n                </div>\n            </div> */}\n        </>\n    )\n}\n\nexport default Tracker"]},"metadata":{},"sourceType":"module"}